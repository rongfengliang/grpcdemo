// Code generated by protoc-gen-go. DO NOT EDIT.
// source: userlogin.proto

/*
Package userlogin is a generated protocol buffer package.

It is generated from these files:
	userlogin.proto

It has these top-level messages:
	UserLoginRequest
	UserTokenRequest
	QueryRequst
	UserLoginResponse
	TokenVerifyResponse
	MessageResponse
*/
package userlogin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserLoginRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *UserLoginRequest) Reset()                    { *m = UserLoginRequest{} }
func (m *UserLoginRequest) String() string            { return proto.CompactTextString(m) }
func (*UserLoginRequest) ProtoMessage()               {}
func (*UserLoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserLoginRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserLoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type UserTokenRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *UserTokenRequest) Reset()                    { *m = UserTokenRequest{} }
func (m *UserTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*UserTokenRequest) ProtoMessage()               {}
func (*UserTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type QueryRequst struct {
	Userid         string `protobuf:"bytes,1,opt,name=userid" json:"userid,omitempty"`
	Messageversion string `protobuf:"bytes,2,opt,name=messageversion" json:"messageversion,omitempty"`
}

func (m *QueryRequst) Reset()                    { *m = QueryRequst{} }
func (m *QueryRequst) String() string            { return proto.CompactTextString(m) }
func (*QueryRequst) ProtoMessage()               {}
func (*QueryRequst) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QueryRequst) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *QueryRequst) GetMessageversion() string {
	if m != nil {
		return m.Messageversion
	}
	return ""
}

type UserLoginResponse struct {
	Code    int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Token   string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
}

func (m *UserLoginResponse) Reset()                    { *m = UserLoginResponse{} }
func (m *UserLoginResponse) String() string            { return proto.CompactTextString(m) }
func (*UserLoginResponse) ProtoMessage()               {}
func (*UserLoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UserLoginResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UserLoginResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UserLoginResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type TokenVerifyResponse struct {
	Isverify bool   `protobuf:"varint,1,opt,name=isverify" json:"isverify,omitempty"`
	Code     int32  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Message  string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *TokenVerifyResponse) Reset()                    { *m = TokenVerifyResponse{} }
func (m *TokenVerifyResponse) String() string            { return proto.CompactTextString(m) }
func (*TokenVerifyResponse) ProtoMessage()               {}
func (*TokenVerifyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TokenVerifyResponse) GetIsverify() bool {
	if m != nil {
		return m.Isverify
	}
	return false
}

func (m *TokenVerifyResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *TokenVerifyResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type MessageResponse struct {
	Code    int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *MessageResponse) Reset()                    { *m = MessageResponse{} }
func (m *MessageResponse) String() string            { return proto.CompactTextString(m) }
func (*MessageResponse) ProtoMessage()               {}
func (*MessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MessageResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *MessageResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*UserLoginRequest)(nil), "platform.login.UserLoginRequest")
	proto.RegisterType((*UserTokenRequest)(nil), "platform.login.UserTokenRequest")
	proto.RegisterType((*QueryRequst)(nil), "platform.login.QueryRequst")
	proto.RegisterType((*UserLoginResponse)(nil), "platform.login.UserLoginResponse")
	proto.RegisterType((*TokenVerifyResponse)(nil), "platform.login.TokenVerifyResponse")
	proto.RegisterType((*MessageResponse)(nil), "platform.login.MessageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserLogin service

type UserLoginClient interface {
	AppLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	TokenVerify(ctx context.Context, in *UserTokenRequest, opts ...grpc.CallOption) (*TokenVerifyResponse, error)
	LongMessage(ctx context.Context, in *QueryRequst, opts ...grpc.CallOption) (UserLogin_LongMessageClient, error)
}

type userLoginClient struct {
	cc *grpc.ClientConn
}

func NewUserLoginClient(cc *grpc.ClientConn) UserLoginClient {
	return &userLoginClient{cc}
}

func (c *userLoginClient) AppLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := grpc.Invoke(ctx, "/platform.login.UserLogin/AppLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLoginClient) TokenVerify(ctx context.Context, in *UserTokenRequest, opts ...grpc.CallOption) (*TokenVerifyResponse, error) {
	out := new(TokenVerifyResponse)
	err := grpc.Invoke(ctx, "/platform.login.UserLogin/TokenVerify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLoginClient) LongMessage(ctx context.Context, in *QueryRequst, opts ...grpc.CallOption) (UserLogin_LongMessageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UserLogin_serviceDesc.Streams[0], c.cc, "/platform.login.UserLogin/LongMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &userLoginLongMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserLogin_LongMessageClient interface {
	Recv() (*MessageResponse, error)
	grpc.ClientStream
}

type userLoginLongMessageClient struct {
	grpc.ClientStream
}

func (x *userLoginLongMessageClient) Recv() (*MessageResponse, error) {
	m := new(MessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for UserLogin service

type UserLoginServer interface {
	AppLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	TokenVerify(context.Context, *UserTokenRequest) (*TokenVerifyResponse, error)
	LongMessage(*QueryRequst, UserLogin_LongMessageServer) error
}

func RegisterUserLoginServer(s *grpc.Server, srv UserLoginServer) {
	s.RegisterService(&_UserLogin_serviceDesc, srv)
}

func _UserLogin_AppLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLoginServer).AppLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.login.UserLogin/AppLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLoginServer).AppLogin(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLogin_TokenVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLoginServer).TokenVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.login.UserLogin/TokenVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLoginServer).TokenVerify(ctx, req.(*UserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLogin_LongMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequst)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserLoginServer).LongMessage(m, &userLoginLongMessageServer{stream})
}

type UserLogin_LongMessageServer interface {
	Send(*MessageResponse) error
	grpc.ServerStream
}

type userLoginLongMessageServer struct {
	grpc.ServerStream
}

func (x *userLoginLongMessageServer) Send(m *MessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _UserLogin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "platform.login.UserLogin",
	HandlerType: (*UserLoginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppLogin",
			Handler:    _UserLogin_AppLogin_Handler,
		},
		{
			MethodName: "TokenVerify",
			Handler:    _UserLogin_TokenVerify_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LongMessage",
			Handler:       _UserLogin_LongMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "userlogin.proto",
}

func init() { proto.RegisterFile("userlogin.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x4f, 0x4b, 0xfb, 0x40,
	0x10, 0xa5, 0xed, 0xaf, 0xfd, 0xa5, 0x13, 0x68, 0x75, 0x15, 0x29, 0xf1, 0x60, 0x8d, 0x20, 0x3d,
	0x05, 0xd1, 0x0f, 0x20, 0xf6, 0xdc, 0x22, 0x86, 0xaa, 0xe0, 0x45, 0xa2, 0x9d, 0x86, 0x60, 0x93,
	0x5d, 0x77, 0x92, 0x4a, 0x8f, 0x7e, 0x73, 0xc9, 0x66, 0x5d, 0xd3, 0x25, 0x78, 0xf0, 0x36, 0x6f,
	0x76, 0xf6, 0xbd, 0x37, 0x7f, 0x60, 0x58, 0x10, 0xca, 0x35, 0x8f, 0x93, 0x2c, 0x10, 0x92, 0xe7,
	0x9c, 0x0d, 0xc4, 0x3a, 0xca, 0x57, 0x5c, 0xa6, 0x81, 0xca, 0xfa, 0x53, 0xd8, 0xbb, 0x27, 0x94,
	0xb3, 0x12, 0x84, 0xf8, 0x5e, 0x20, 0xe5, 0x8c, 0xc1, 0xbf, 0x2c, 0x4a, 0x71, 0xd4, 0x1a, 0xb7,
	0x26, 0xfd, 0x50, 0xc5, 0xcc, 0x03, 0x47, 0x44, 0x44, 0x1f, 0x5c, 0x2e, 0x47, 0x6d, 0x95, 0x37,
	0xd8, 0x9f, 0x54, 0x1c, 0x0b, 0xfe, 0x86, 0x86, 0xe3, 0x10, 0xba, 0x79, 0x89, 0x35, 0x49, 0x05,
	0xfc, 0x39, 0xb8, 0x77, 0x05, 0xca, 0x6d, 0x59, 0x45, 0x39, 0x3b, 0x82, 0x5e, 0xe9, 0x2f, 0x59,
	0xea, 0x2a, 0x8d, 0xd8, 0x39, 0x0c, 0x52, 0x24, 0x8a, 0x62, 0xdc, 0xa0, 0xa4, 0x84, 0x67, 0x5a,
	0xd2, 0xca, 0xfa, 0x8f, 0xb0, 0x5f, 0x33, 0x4f, 0x82, 0x67, 0x84, 0xa5, 0xfb, 0x57, 0xbe, 0xac,
	0xdc, 0x77, 0x43, 0x15, 0xb3, 0x11, 0xfc, 0xd7, 0x5f, 0x35, 0xd3, 0x37, 0xfc, 0xf1, 0xd9, 0xa9,
	0xfb, 0x7c, 0x86, 0x03, 0xd5, 0xcd, 0x03, 0xca, 0x64, 0xb5, 0x35, 0xd4, 0x1e, 0x38, 0x09, 0x6d,
	0x54, 0x4e, 0xd1, 0x3b, 0xa1, 0xc1, 0x46, 0xb6, 0xdd, 0x2c, 0xdb, 0xd9, 0x91, 0xf5, 0xaf, 0x61,
	0x38, 0xaf, 0xc2, 0xbf, 0xf9, 0xbe, 0xfc, 0x6c, 0x43, 0xdf, 0xf4, 0xce, 0x6e, 0xc1, 0xb9, 0x11,
	0xa2, 0x8a, 0xc7, 0xc1, 0xee, 0x8a, 0x03, 0x7b, 0xbf, 0xde, 0xe9, 0x2f, 0x15, 0xda, 0xcc, 0x02,
	0xdc, 0xda, 0x00, 0x9a, 0x39, 0xeb, 0xfb, 0xf6, 0xce, 0xec, 0x8a, 0xa6, 0xf9, 0xcd, 0xc1, 0x9d,
	0xf1, 0x2c, 0xd6, 0x9d, 0xb3, 0x63, 0xfb, 0x4f, 0xed, 0x36, 0xbc, 0x13, 0xfb, 0xd1, 0x9a, 0xd7,
	0x45, 0x6b, 0xea, 0x3e, 0xf5, 0xcd, 0x79, 0xbf, 0xf4, 0xd4, 0x7d, 0x5f, 0x7d, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x96, 0x1a, 0x43, 0xa5, 0xf2, 0x02, 0x00, 0x00,
}
