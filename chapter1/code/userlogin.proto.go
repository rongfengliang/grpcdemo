//Code generated by xproto [v0.1.0], DO NOT EDIT.
//source: [userlogin.proto]
//Package [userlogin] is a generated stub package.
//This code was generated with github.com/donutloop/xservice [v0.1.0]
//It is generated from these files:
//	 [userlogin.proto]
//package [userlogin]

package userlogin

import (
	"bytes"
	"fmt"
	"log"
	"net/http"
	"strings"

	"github.com/donutloop/xservice/framework/errors"
	"github.com/donutloop/xservice/framework/hooks"
	"github.com/donutloop/xservice/framework/server"
	"github.com/donutloop/xservice/framework/transport"
	"github.com/donutloop/xservice/framework/xcontext"
	"github.com/donutloop/xservice/framework/xhttp"
	jsonpb "github.com/golang/protobuf/jsonpb"
	context "golang.org/x/net/context"
)

// //[UserLoginPathPrefix UserLogin] is used for all URL paths on a %!s(MISSING) server.
//Requests are always: POST [UserLoginPathPrefix] /method
//It can be used in an HTTP mux to route requests
const UserLoginPathPrefix string = "/xservice/platform.login.UserLogin/"

// 330 bytes of a gzipped FileDescriptorProto
var xserviceFileDescriptor0 = []byte{0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x4d, 0x4b, 0xc3, 0x40, 0x10, 0x25, 0xad, 0xad, 0xe9, 0x04, 0x5a, 0x5d, 0x45, 0x4a, 0x3c, 0x58, 0x23, 0x48, 0x4f, 0x41, 0xf4, 0x07, 0x88, 0x3d, 0xb7, 0x14, 0x43, 0x55, 0xf0, 0x22, 0xd1, 0x4e, 0x4b, 0xb0, 0xcd, 0xae, 0x3b, 0x49, 0xa5, 0x67, 0xff, 0xb8, 0x64, 0xb3, 0xae, 0xe9, 0x12, 0x3c, 0x78, 0x9b, 0x37, 0x3b, 0xfb, 0xde, 0x9b, 0x0f, 0xe8, 0xe5, 0x84, 0x72, 0xc5, 0x97, 0x49, 0x1a, 0x0a, 0xc9, 0x33, 0xce, 0xba, 0x62, 0x15, 0x67, 0x0b, 0x2e, 0xd7, 0xa1, 0xca, 0x06, 0x23, 0x38, 0x78, 0x20, 0x94, 0xe3, 0x02, 0x44, 0xf8, 0x91, 0x23, 0x65, 0x8c, 0xc1, 0x5e, 0x1a, 0xaf, 0xb1, 0xef, 0x0c, 0x9c, 0x61, 0x27, 0x52, 0x31, 0xf3, 0xc1, 0x15, 0x31, 0xd1, 0x27, 0x97, 0xf3, 0x7e, 0x43, 0xe5, 0x0d, 0x0e, 0x86, 0x25, 0xc7, 0x8c, 0xbf, 0xa3, 0xe1, 0x38, 0x86, 0x56, 0x56, 0x60, 0x4d, 0x52, 0x82, 0x60, 0x02, 0xde, 0x7d, 0x8e, 0x72, 0x5b, 0x54, 0x51, 0xc6, 0x4e, 0xa0, 0x5d, 0xf8, 0x4b, 0xe6, 0xba, 0x4a, 0x23, 0x76, 0x09, 0xdd, 0x35, 0x12, 0xc5, 0x4b, 0xdc, 0xa0, 0xa4, 0x84, 0xa7, 0x5a, 0xd2, 0xca, 0x06, 0x4f, 0x70, 0x58, 0x31, 0x4f, 0x82, 0xa7, 0x84, 0x85, 0xfb, 0x37, 0x3e, 0x2f, 0xdd, 0xb7, 0x22, 0x15, 0xb3, 0x3e, 0xec, 0xeb, 0xaf, 0x9a, 0xe9, 0x07, 0xfe, 0xfa, 0x6c, 0x56, 0x7d, 0xbe, 0xc0, 0x91, 0xea, 0xe6, 0x11, 0x65, 0xb2, 0xd8, 0x1a, 0x6a, 0x1f, 0xdc, 0x84, 0x36, 0x2a, 0xa7, 0xe8, 0xdd, 0xc8, 0x60, 0x23, 0xdb, 0xa8, 0x97, 0x6d, 0xee, 0xc8, 0x06, 0xb7, 0xd0, 0x9b, 0x94, 0xe1, 0xff, 0x7c, 0x5f, 0x7f, 0x35, 0xa0, 0x63, 0x7a, 0x67, 0x53, 0x70, 0xef, 0x84, 0x28, 0xe3, 0x41, 0xb8, 0xbb, 0xe2, 0xd0, 0xde, 0xaf, 0x7f, 0xfe, 0x47, 0x85, 0x36, 0x33, 0x03, 0xaf, 0x32, 0x80, 0x7a, 0xce, 0xea, 0xbe, 0xfd, 0x0b, 0xbb, 0xa2, 0x6e, 0x7e, 0x53, 0xf0, 0xc6, 0x3c, 0x5d, 0xea, 0xce, 0xd9, 0xa9, 0xfd, 0xa7, 0x72, 0x1b, 0xfe, 0x99, 0xfd, 0x68, 0xcd, 0x6b, 0xe8, 0x5c, 0x39, 0x23, 0xef, 0xb9, 0x63, 0x0e, 0xfc, 0xb5, 0xad, 0x2e, 0xfc, 0xe6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x75, 0x9f, 0xc4, 0x6f, 0xf4, 0x02, 0x00, 0x00}

type UserLogin interface {
	AppLogin(ctx context.Context, req *UserLoginRequest) (*UserLoginResponse, error)

	TokenVerify(ctx context.Context, req *UserTokenRequest) (*TokenVerifyResponse, error)

	LongMessage(ctx context.Context, req *QueryRequst) (*MessageResponse, error)
}

type userLoginJSONClient struct {
	client transport.HTTPClient
	urls   [3]string
}

func (c *userLoginJSONClient) AppLogin(ctx context.Context, in *UserLoginRequest) (*UserLoginResponse, error) {
	ctx = xcontext.WithPackageName(ctx, "platform.login")
	ctx = xcontext.WithServiceName(ctx, "UserLogin")
	ctx = xcontext.WithMethodName(ctx, "AppLogin")
	out := new(UserLoginResponse)
	err := transport.DoJSONRequest(ctx, c.client, c.urls[0], in, out)
	return out, err
}

func (c *userLoginJSONClient) TokenVerify(ctx context.Context, in *UserTokenRequest) (*TokenVerifyResponse, error) {
	ctx = xcontext.WithPackageName(ctx, "platform.login")
	ctx = xcontext.WithServiceName(ctx, "UserLogin")
	ctx = xcontext.WithMethodName(ctx, "TokenVerify")
	out := new(TokenVerifyResponse)
	err := transport.DoJSONRequest(ctx, c.client, c.urls[1], in, out)
	return out, err
}

func (c *userLoginJSONClient) LongMessage(ctx context.Context, in *QueryRequst) (*MessageResponse, error) {
	ctx = xcontext.WithPackageName(ctx, "platform.login")
	ctx = xcontext.WithServiceName(ctx, "UserLogin")
	ctx = xcontext.WithMethodName(ctx, "LongMessage")
	out := new(MessageResponse)
	err := transport.DoJSONRequest(ctx, c.client, c.urls[2], in, out)
	return out, err
}

type userLoginServer struct {
	UserLogin
	hooks        *hooks.ServerHooks
	logErrorFunc transport.LogErrorFunc
}

func (s *userLoginServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	transport.WriteErrorAndTriggerHooks(ctx, resp, err, s.hooks)
}

func (s *userLoginServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = xcontext.WithPackageName(ctx, "platform.login")
	ctx = xcontext.WithServiceName(ctx, "UserLogin")
	ctx = xcontext.WithResponseWriter(ctx, resp)
	var err error
	ctx, err = transport.CallRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if req.Method != http.MethodPost {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		terr := errors.BadRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, terr)
		return
	}

	switch req.URL.Path {
	case "/xservice/platform.login.UserLogin/AppLogin":
		s.serveAppLogin(ctx, resp, req)
		return
	case "/xservice/platform.login.UserLogin/TokenVerify":
		s.serveTokenVerify(ctx, resp, req)
		return
	case "/xservice/platform.login.UserLogin/LongMessage":
		s.serveLongMessage(ctx, resp, req)
		return

	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		terr := errors.BadRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, terr)
		return
	}

}

func (s *userLoginServer) serveAppLogin(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get(xhttp.ContentTypeHeader)
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	modifiedHeader := strings.ToLower(header[:i])
	modifiedHeader = strings.TrimSpace(modifiedHeader)
	if modifiedHeader == xhttp.ApplicationJson {
		s.serveAppLoginJSON(ctx, resp, req)
	} else {
		msg := fmt.Sprintf("unexpected Content-Type: %q", header)
		terr := errors.BadRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, terr)
	}
	return
}

func (s *userLoginServer) serveAppLoginJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = xcontext.WithMethodName(ctx, "AppLogin")
	ctx, err = transport.CallRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	defer transport.Closebody(req.Body, s.logErrorFunc)

	reqContent := new(UserLoginRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	err = unmarshaler.Unmarshal(req.Body, reqContent)
	if err != nil {
		err = errors.WrapErr(err, "failed to parse request json")
		terr := errors.InternalErrorWith(err)
		s.logErrorFunc("%v", err)
		s.writeError(ctx, resp, terr)
		return
	}
	respContent := new(UserLoginResponse)
	responseCallWrapper := func() {
		responseDeferWrapper := func() {
			r := recover()
			if r != nil {
				terr := errors.InternalError("Internal service panic")
				s.writeError(ctx, resp, terr)
				panic(r)
			}
		}
		defer responseDeferWrapper()

		respContent, err = s.AppLogin(ctx, reqContent)
	}
	responseCallWrapper()
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		terr := errors.InternalError("received a nil * UserLoginResponse, and nil error while calling AppLogin. nil responses are not supported")
		s.logErrorFunc("%v", err)
		s.writeError(ctx, resp, terr)
		return
	}
	ctx = transport.CallResponsePrepared(ctx, s.hooks)
	buff := new(bytes.Buffer)
	marshaler := &jsonpb.Marshaler{OrigName: true}
	err = marshaler.Marshal(buff, respContent)
	if err != nil {
		err = errors.WrapErr(err, "failed to marshal json response")
		terr := errors.InternalErrorWith(err)
		s.logErrorFunc("%v", err)
		s.writeError(ctx, resp, terr)
		return
	}
	ctx = xcontext.WithStatusCode(ctx, http.StatusOK)
	req.Header.Set(xhttp.ContentTypeHeader, xhttp.ApplicationJson)
	resp.WriteHeader(http.StatusOK)
	respBytes := buff.Bytes()
	_, err = resp.Write(respBytes)
	if err != nil {
		s.logErrorFunc("error while writing response to client, but already sent response status code to 200: %s", err)
		resp.WriteHeader(http.StatusInternalServerError)
		return
	}
	transport.CallResponseSent(ctx, s.hooks)
}

func (s *userLoginServer) serveTokenVerify(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get(xhttp.ContentTypeHeader)
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	modifiedHeader := strings.ToLower(header[:i])
	modifiedHeader = strings.TrimSpace(modifiedHeader)
	if modifiedHeader == xhttp.ApplicationJson {
		s.serveTokenVerifyJSON(ctx, resp, req)
	} else {
		msg := fmt.Sprintf("unexpected Content-Type: %q", header)
		terr := errors.BadRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, terr)
	}
	return
}

func (s *userLoginServer) serveTokenVerifyJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = xcontext.WithMethodName(ctx, "TokenVerify")
	ctx, err = transport.CallRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	defer transport.Closebody(req.Body, s.logErrorFunc)

	reqContent := new(UserTokenRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	err = unmarshaler.Unmarshal(req.Body, reqContent)
	if err != nil {
		err = errors.WrapErr(err, "failed to parse request json")
		terr := errors.InternalErrorWith(err)
		s.logErrorFunc("%v", err)
		s.writeError(ctx, resp, terr)
		return
	}
	respContent := new(TokenVerifyResponse)
	responseCallWrapper := func() {
		responseDeferWrapper := func() {
			r := recover()
			if r != nil {
				terr := errors.InternalError("Internal service panic")
				s.writeError(ctx, resp, terr)
				panic(r)
			}
		}
		defer responseDeferWrapper()

		respContent, err = s.TokenVerify(ctx, reqContent)
	}
	responseCallWrapper()
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		terr := errors.InternalError("received a nil * TokenVerifyResponse, and nil error while calling TokenVerify. nil responses are not supported")
		s.logErrorFunc("%v", err)
		s.writeError(ctx, resp, terr)
		return
	}
	ctx = transport.CallResponsePrepared(ctx, s.hooks)
	buff := new(bytes.Buffer)
	marshaler := &jsonpb.Marshaler{OrigName: true}
	err = marshaler.Marshal(buff, respContent)
	if err != nil {
		err = errors.WrapErr(err, "failed to marshal json response")
		terr := errors.InternalErrorWith(err)
		s.logErrorFunc("%v", err)
		s.writeError(ctx, resp, terr)
		return
	}
	ctx = xcontext.WithStatusCode(ctx, http.StatusOK)
	req.Header.Set(xhttp.ContentTypeHeader, xhttp.ApplicationJson)
	resp.WriteHeader(http.StatusOK)
	respBytes := buff.Bytes()
	_, err = resp.Write(respBytes)
	if err != nil {
		s.logErrorFunc("error while writing response to client, but already sent response status code to 200: %s", err)
		resp.WriteHeader(http.StatusInternalServerError)
		return
	}
	transport.CallResponseSent(ctx, s.hooks)
}

func (s *userLoginServer) serveLongMessage(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get(xhttp.ContentTypeHeader)
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	modifiedHeader := strings.ToLower(header[:i])
	modifiedHeader = strings.TrimSpace(modifiedHeader)
	if modifiedHeader == xhttp.ApplicationJson {
		s.serveLongMessageJSON(ctx, resp, req)
	} else {
		msg := fmt.Sprintf("unexpected Content-Type: %q", header)
		terr := errors.BadRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, terr)
	}
	return
}

func (s *userLoginServer) serveLongMessageJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = xcontext.WithMethodName(ctx, "LongMessage")
	ctx, err = transport.CallRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	defer transport.Closebody(req.Body, s.logErrorFunc)

	reqContent := new(QueryRequst)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	err = unmarshaler.Unmarshal(req.Body, reqContent)
	if err != nil {
		err = errors.WrapErr(err, "failed to parse request json")
		terr := errors.InternalErrorWith(err)
		s.logErrorFunc("%v", err)
		s.writeError(ctx, resp, terr)
		return
	}
	respContent := new(MessageResponse)
	responseCallWrapper := func() {
		responseDeferWrapper := func() {
			r := recover()
			if r != nil {
				terr := errors.InternalError("Internal service panic")
				s.writeError(ctx, resp, terr)
				panic(r)
			}
		}
		defer responseDeferWrapper()

		respContent, err = s.LongMessage(ctx, reqContent)
	}
	responseCallWrapper()
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		terr := errors.InternalError("received a nil * MessageResponse, and nil error while calling LongMessage. nil responses are not supported")
		s.logErrorFunc("%v", err)
		s.writeError(ctx, resp, terr)
		return
	}
	ctx = transport.CallResponsePrepared(ctx, s.hooks)
	buff := new(bytes.Buffer)
	marshaler := &jsonpb.Marshaler{OrigName: true}
	err = marshaler.Marshal(buff, respContent)
	if err != nil {
		err = errors.WrapErr(err, "failed to marshal json response")
		terr := errors.InternalErrorWith(err)
		s.logErrorFunc("%v", err)
		s.writeError(ctx, resp, terr)
		return
	}
	ctx = xcontext.WithStatusCode(ctx, http.StatusOK)
	req.Header.Set(xhttp.ContentTypeHeader, xhttp.ApplicationJson)
	resp.WriteHeader(http.StatusOK)
	respBytes := buff.Bytes()
	_, err = resp.Write(respBytes)
	if err != nil {
		s.logErrorFunc("error while writing response to client, but already sent response status code to 200: %s", err)
		resp.WriteHeader(http.StatusInternalServerError)
		return
	}
	transport.CallResponseSent(ctx, s.hooks)
}

func (s *userLoginServer) ServiceDescriptor() ([]uint8, int) {
	return xserviceFileDescriptor0, 0
}

func (s *userLoginServer) ProtocGenXServiceVersion() string {
	return "v0.1.0"
}

func NewUserLoginJSONClient(addr string, client transport.HTTPClient) UserLogin {
	URLBase := transport.UrlBase(addr)
	prefix := URLBase + UserLoginPathPrefix
	urls := [3]string{
		prefix + "AppLogin",
		prefix + "TokenVerify",
		prefix + "LongMessage",
	}
	httpClient, ok := client.(*http.Client)
	if ok == true {
		httpClient = transport.WithoutRedirects(httpClient)
		return &userLoginJSONClient{
			client: httpClient,
			urls:   urls,
		}
	}
	return &userLoginJSONClient{
		client: client,
		urls:   urls,
	}
}
func NewUserLoginServer(svc UserLogin, hooks *hooks.ServerHooks, errorFunc ...transport.LogErrorFunc) server.Server {
	server := &userLoginServer{
		UserLogin: svc,
		hooks:     hooks,
	}
	if len(errorFunc) == 1 {
		server.logErrorFunc = errorFunc[0]
	} else {
		server.logErrorFunc = log.Printf
	}
	return server
}
